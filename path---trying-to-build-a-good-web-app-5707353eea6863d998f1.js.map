{"version":3,"sources":["webpack:///path---trying-to-build-a-good-web-app-5707353eea6863d998f1.js","webpack:///./.cache/json/trying-to-build-a-good-web-app.json"],"names":["webpackJsonp","472","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","fields","nextTitle","nextSlug","prevTitle","prevSlug","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,6rKACAC,WAAA,EACAC,QAAA,2IACAC,aACAC,MAAA,iCACAC,MAAA,mBACAC,KAAA,aACAC,SAAA,uBACAC,MACA,cACA,iBAGAC,QACAC,UAAA,qBACAC,SAAA,sBACAC,UAAA,mBACAC,SAAA,oBACAC,KAAA,qCAIAC,aACAD,KAAA","file":"path---trying-to-build-a-good-web-app-5707353eea6863d998f1.js","sourcesContent":["webpackJsonp([272118427123160],{\n\n/***/ 472:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<h1 id=\\\"motivation\\\"><a href=\\\"#motivation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Motivation</h1>\\n<p>Our project \\\"MIWF\\\" was built during our Advanced Software Engineering class.\\nWe wanted to build an application that allowed people to simulate stock trading.\\nThis hypothetical product would mostly target people who have no experience in\\nstock trading and want to get involved.</p>\\n<h1 id=\\\"software-stack\\\"><a href=\\\"#software-stack\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Software Stack</h1>\\n<p>We tried to decide on components that fit our experience and are appropriate\\nfor the project:</p>\\n<ul>\\n<li>Database: We picked <a href=\\\"https://www.postgresql.org/\\\">PostgreSQL</a> as our database.\\nTo all of us it was clear that a relational database was the best decision,\\nsince our data fits very well in a schema, required a lot of aggregation\\nqueries, and the database is widely deployed. Our decision fell on PostgreSQL\\nover MySQL simply, since we had more operational experience with former.</li>\\n<li>Backend: Our backend was powered by <a href=\\\"https://www.djangoproject.com/\\\">Django</a>.\\nPython was the only language that all of us had worked with before, thus that\\npart was an easy decision. Then we could have either gone with Flask + SQLAlchemy\\nor Django. We chose latter, since it offered more of a all-in-one solution and\\nthus made it easier for our team. Also Django has an awesome <a href=\\\"https://docs.djangoproject.com/en/2.0/\\\">documentation</a>!</li>\\n<li>API: We exposed our data via <a href=\\\"http://graphql.org/\\\">GraphQL</a>. It allowed us to\\nmanage our data definitions in an easier way. On top of that <a href=\\\"http://graphene-python.org/\\\">Graphene</a> allowed us to parallelize a lot of data fetching.\\nOn the client side it allowed us to easily evolve our data needs with <a href=\\\"https://facebook.github.io/relay/\\\">Relay</a>.</li>\\n<li>Frontend: We used <a href=\\\"https://reactjs.org/\\\">React</a> to manage our view layer. It\\nallowed us to work well with user interactions. Paired with <a href=\\\"https://facebook.github.io/relay/\\\">Relay</a>, we were able to model user data and\\ninteraction very well. The declarative style allowed us to reason easily about\\nthe data.</li>\\n<li>Documentation: We generated our documentation with Sphinx and deployed it to readthedocs. You can find it <a href=\\\"http://ase4156.readthedocs.io/\\\">here</a>.</li>\\n<li>\\n<p>External Services: We integrated our application with some external services\\nto move critical data away from our responsibility.</p>\\n<ul>\\n<li><a href=\\\"https://plaid.com/\\\">Plaid</a>: This API allowed us to integrate with real\\nproduction data. Users were able to link our application with their real bank\\naccount.</li>\\n<li><a href=\\\"https://developers.google.com/identity/sign-in/web/sign-in\\\">Google Auth</a>:\\nWe did not want to take the responsibility of authenticating the user, since\\nwe would have to store the password and prevent attacks. Thus instead we went\\nwith Google Authentication. Integrating with it was a breeze.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Testing: A major focus of the class was properly testing the application. We\\nwere able to achieve a 96% test coverage.</p>\\n<ul>\\n<li>Python: Django offered an <a href=\\\"https://docs.djangoproject.com/en/2.0/topics/testing/overview/\\\">internal testing tool</a>, but <a href=\\\"https://docs.pytest.org/en/latest/\\\">pytest</a> had a better appeal for us, since it is\\nwidely used. It was not always easy to integrate with Django, but it ended up\\nworking mostly.</li>\\n<li>Javascript: We used <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a> to test the\\nJavascript side of our application. Combined with <a href=\\\"https://facebook.github.io/jest/docs/en/snapshot-testing.html\\\">Snapshot Testing</a> we were able\\nto mostly test our client side. However we struggled with testing Relay\\ncomponents. Ultimately we were forced to add a lot of extra test data to\\nmatch the expected fragments. An example testcase is <a href=\\\"https://github.com/Neitsch/ASE4156/blob/master/web/js/components/InvestBucket/__tests__/InvestBucketRelay-test.jsx\\\">here</a>.</li>\\n<li>Selenium: This served as one of our pillars to verify that our software\\nactually worked. Unit and integration testing took us 90% of the way, but\\nSelenium caught several regressions during our development process. Overall\\nit was important that we used that tool.</li>\\n</ul>\\n</li>\\n</ul>\",\n\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\"excerpt\": \"Motivation Our project \\\"MIWF\\\" was built during our Advanced Software Engineering class.\\nWe wanted to build an application that allowedâ€¦\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Trying to build a good web app\",\n\t\t\t\t\t\"cover\": \"/img/app-dev.jpg\",\n\t\t\t\t\t\"date\": \"11/02/2018\",\n\t\t\t\t\t\"category\": \"software engineering\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"programming\",\n\t\t\t\t\t\t\"past project\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"fields\": {\n\t\t\t\t\t\"nextTitle\": \"Welcome to my Blog\",\n\t\t\t\t\t\"nextSlug\": \"/welcome-to-my-blog\",\n\t\t\t\t\t\"prevTitle\": \"Capsule Networks\",\n\t\t\t\t\t\"prevSlug\": \"/capsule-networks\",\n\t\t\t\t\t\"slug\": \"/trying-to-build-a-good-web-app\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/trying-to-build-a-good-web-app\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---trying-to-build-a-good-web-app-5707353eea6863d998f1.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<h1 id=\\\"motivation\\\"><a href=\\\"#motivation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Motivation</h1>\\n<p>Our project \\\"MIWF\\\" was built during our Advanced Software Engineering class.\\nWe wanted to build an application that allowed people to simulate stock trading.\\nThis hypothetical product would mostly target people who have no experience in\\nstock trading and want to get involved.</p>\\n<h1 id=\\\"software-stack\\\"><a href=\\\"#software-stack\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Software Stack</h1>\\n<p>We tried to decide on components that fit our experience and are appropriate\\nfor the project:</p>\\n<ul>\\n<li>Database: We picked <a href=\\\"https://www.postgresql.org/\\\">PostgreSQL</a> as our database.\\nTo all of us it was clear that a relational database was the best decision,\\nsince our data fits very well in a schema, required a lot of aggregation\\nqueries, and the database is widely deployed. Our decision fell on PostgreSQL\\nover MySQL simply, since we had more operational experience with former.</li>\\n<li>Backend: Our backend was powered by <a href=\\\"https://www.djangoproject.com/\\\">Django</a>.\\nPython was the only language that all of us had worked with before, thus that\\npart was an easy decision. Then we could have either gone with Flask + SQLAlchemy\\nor Django. We chose latter, since it offered more of a all-in-one solution and\\nthus made it easier for our team. Also Django has an awesome <a href=\\\"https://docs.djangoproject.com/en/2.0/\\\">documentation</a>!</li>\\n<li>API: We exposed our data via <a href=\\\"http://graphql.org/\\\">GraphQL</a>. It allowed us to\\nmanage our data definitions in an easier way. On top of that <a href=\\\"http://graphene-python.org/\\\">Graphene</a> allowed us to parallelize a lot of data fetching.\\nOn the client side it allowed us to easily evolve our data needs with <a href=\\\"https://facebook.github.io/relay/\\\">Relay</a>.</li>\\n<li>Frontend: We used <a href=\\\"https://reactjs.org/\\\">React</a> to manage our view layer. It\\nallowed us to work well with user interactions. Paired with <a href=\\\"https://facebook.github.io/relay/\\\">Relay</a>, we were able to model user data and\\ninteraction very well. The declarative style allowed us to reason easily about\\nthe data.</li>\\n<li>Documentation: We generated our documentation with Sphinx and deployed it to readthedocs. You can find it <a href=\\\"http://ase4156.readthedocs.io/\\\">here</a>.</li>\\n<li>\\n<p>External Services: We integrated our application with some external services\\nto move critical data away from our responsibility.</p>\\n<ul>\\n<li><a href=\\\"https://plaid.com/\\\">Plaid</a>: This API allowed us to integrate with real\\nproduction data. Users were able to link our application with their real bank\\naccount.</li>\\n<li><a href=\\\"https://developers.google.com/identity/sign-in/web/sign-in\\\">Google Auth</a>:\\nWe did not want to take the responsibility of authenticating the user, since\\nwe would have to store the password and prevent attacks. Thus instead we went\\nwith Google Authentication. Integrating with it was a breeze.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Testing: A major focus of the class was properly testing the application. We\\nwere able to achieve a 96% test coverage.</p>\\n<ul>\\n<li>Python: Django offered an <a href=\\\"https://docs.djangoproject.com/en/2.0/topics/testing/overview/\\\">internal testing tool</a>, but <a href=\\\"https://docs.pytest.org/en/latest/\\\">pytest</a> had a better appeal for us, since it is\\nwidely used. It was not always easy to integrate with Django, but it ended up\\nworking mostly.</li>\\n<li>Javascript: We used <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a> to test the\\nJavascript side of our application. Combined with <a href=\\\"https://facebook.github.io/jest/docs/en/snapshot-testing.html\\\">Snapshot Testing</a> we were able\\nto mostly test our client side. However we struggled with testing Relay\\ncomponents. Ultimately we were forced to add a lot of extra test data to\\nmatch the expected fragments. An example testcase is <a href=\\\"https://github.com/Neitsch/ASE4156/blob/master/web/js/components/InvestBucket/__tests__/InvestBucketRelay-test.jsx\\\">here</a>.</li>\\n<li>Selenium: This served as one of our pillars to verify that our software\\nactually worked. Unit and integration testing took us 90% of the way, but\\nSelenium caught several regressions during our development process. Overall\\nit was important that we used that tool.</li>\\n</ul>\\n</li>\\n</ul>\",\n\t\t\t\"timeToRead\": 3,\n\t\t\t\"excerpt\": \"Motivation Our project \\\"MIWF\\\" was built during our Advanced Software Engineering class.\\nWe wanted to build an application that allowedâ€¦\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Trying to build a good web app\",\n\t\t\t\t\"cover\": \"/img/app-dev.jpg\",\n\t\t\t\t\"date\": \"11/02/2018\",\n\t\t\t\t\"category\": \"software engineering\",\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"programming\",\n\t\t\t\t\t\"past project\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"fields\": {\n\t\t\t\t\"nextTitle\": \"Welcome to my Blog\",\n\t\t\t\t\"nextSlug\": \"/welcome-to-my-blog\",\n\t\t\t\t\"prevTitle\": \"Capsule Networks\",\n\t\t\t\t\"prevSlug\": \"/capsule-networks\",\n\t\t\t\t\"slug\": \"/trying-to-build-a-good-web-app\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/trying-to-build-a-good-web-app\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/trying-to-build-a-good-web-app.json\n// module id = 472\n// module chunks = 272118427123160"],"sourceRoot":""}