{"pageProps":{"post":{"__typename":"Post","title":"Systemd Services are frustratingly to make safe","slug":"systemd-frustration","content":"Today's story starts with me wanting to reduce the permissions of some of the systemd services I run. The two services I set my sight on were [opensnitch](https://github.com/evilsocket/opensnitch), a system service, and [protonmail-bridge](https://github.com/ProtonMail/proton-bridge), a user service.\n\n# Opensnitch\n\nConveniently opensnitch provides a working [systemd unit](https://github.com/evilsocket/opensnitch/blob/0d1e9f5b4750cc7932eb42618d7c4b2b87022dc7/daemon/opensnitchd.service):\n```\n[Unit]\nDescription=OpenSnitch is a GNU/Linux port of the Little Snitch application firewall.\nDocumentation=https://github.com/gustavo-iniguez-goya/opensnitch/wiki\nWants=network.target\nAfter=network.target\n\n[Service]\nType=simple\nPermissionsStartOnly=true\nExecStartPre=/bin/mkdir -p /etc/opensnitchd/rules\nExecStart=/usr/local/bin/opensnitchd -rules-path /etc/opensnitchd/rules\nRestart=always\nRestartSec=30\n\n[Install]\nWantedBy=multi-user.target\n```\nLet's break down what this unit does:\n* `Description` and `Documentation` are quite self explanatory and don't affect the runtime of the unit.\n* `Wants=network.target` means that this service may only be started after the networking layer has been initialized.\n* `After=network.target` means that this service should automatically be started once the networking layer has been initialized.\n* `Type=simple` specifies how the unit launches. `simple` is often the right choice, but processes that daemonize itself for example will be `forking`.\n* `PermissionsStartOnly=true` is a deprecated attribute that removed some permissions from `ExecStartPre`, but notably not from `ExecStart`.\n* `ExecStartPre=...` is run before the systemd unit starts up. In this case it ensures that a required directory exists.\n* `ExecStart=...` should be the command to run the systemd unit itself.\n* `Restart=always` will cause the process in `ExecStart` to be launched again if it ever exits. `RestartSec=30` specifies how long to wait before relaunching.\n* Finally `WantedBy=multi-user.target` is related to how the systemd unit is initially installed.\n\nAs far as I know, this is a very typical systemd unit. However, especially a unit that handles network activity we want to limit the damage it could cause if it is compromised in any way. For example, a buffer overflow within opensnitch may allow the attacker to execute arbitrary command in the process of the systemd unit.\n\nMy first attempt to tackle this was to look at the [official documentation](https://www.freedesktop.org/software/systemd/man/systemd.exec.html). The density of the documentation makes it quite challenging to understand best practices. Instead I turned to [systemd-analyze security](https://www.freedesktop.org/software/systemd/man/systemd-analyze.html). This command spits out a long list of things that can be improved:\n```\n  NAME                                                        DESCRIPTION                                                             EXPOSURE\n✗ PrivateNetwork=                                             Service has access to the host's network                                     0.5\n✗ User=/DynamicUser=                                          Service runs as root user                                                    0.4\n✗ CapabilityBoundingSet=~CAP_SET(UID|GID|PCAP)                Service may change UID/GID identities/capabilities                           0.3\n✗ CapabilityBoundingSet=~CAP_SYS_ADMIN                        Service has administrator privileges                                         0.3\n✗ CapabilityBoundingSet=~CAP_SYS_PTRACE                       Service has ptrace() debugging abilities                                     0.3\n✗ RestrictAddressFamilies=~AF_(INET|INET6)                    Service may allocate Internet sockets                                        0.3\n✗ RestrictNamespaces=~CLONE_NEWUSER                           Service may create user namespaces                                           0.3\n✗ RestrictAddressFamilies=~…                                  Service may allocate exotic sockets                                          0.3\n✗ CapabilityBoundingSet=~CAP_(CHOWN|FSETID|SETFCAP)           Service may change file ownership/access mode/capabilities unrestricted      0.2\n✗ CapabilityBoundingSet=~CAP_(DAC_*|FOWNER|IPC_OWNER)         Service may override UNIX file/IPC permission checks                         0.2\n✗ CapabilityBoundingSet=~CAP_NET_ADMIN                        Service has network configuration privileges                                 0.2\n✗ CapabilityBoundingSet=~CAP_RAWIO                            Service has raw I/O access                                                   0.2\n✗ CapabilityBoundingSet=~CAP_SYS_MODULE                       Service may load kernel modules                                              0.2\n✗ CapabilityBoundingSet=~CAP_SYS_TIME                         Service processes may change the system clock                                0.2\n✗ DeviceAllow=                                                Service has no device ACL                                                    0.2\n✗ IPAddressDeny=                                              Service does not define an IP address whitelist                              0.2\n✓ KeyringMode=                                                Service doesn't share key material with other services\n✗ NoNewPrivileges=                                            Service processes may acquire new privileges                                 0.2\n✓ NotifyAccess=                                               Service child processes cannot alter service state\n✗ PrivateDevices=                                             Service potentially has access to hardware devices                           0.2\n✗ PrivateMounts=                                              Service may install system mounts                                            0.2\n✗ PrivateTmp=                                                 Service has access to other software's temporary files                       0.2\n✗ PrivateUsers=                                               Service has access to other users                                            0.2\n✗ ProtectControlGroups=                                       Service may modify to the control group file system                          0.2\n✗ ProtectHome=                                                Service has full access to home directories                                  0.2\n✗ ProtectKernelModules=                                       Service may load or read kernel modules                                      0.2\n✗ ProtectKernelTunables=                                      Service may alter kernel tunables                                            0.2\n✗ ProtectSystem=                                              Service has full access to the OS file hierarchy                             0.2\n✗ RestrictAddressFamilies=~AF_PACKET                          Service may allocate packet sockets                                          0.2\n✗ SystemCallArchitectures=                                    Service may execute system calls with all ABIs                               0.2\n✗ SystemCallFilter=~@clock                                    Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@debug                                    Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@module                                   Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@mount                                    Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@raw-io                                   Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@reboot                                   Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@swap                                     Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@privileged                               Service does not filter system calls                                         0.2\n✗ SystemCallFilter=~@resources                                Service does not filter system calls                                         0.2\n✓ AmbientCapabilities=                                        Service process does not receive ambient capabilities\n✗ CapabilityBoundingSet=~CAP_AUDIT_*                          Service has audit subsystem access                                           0.1\n✗ CapabilityBoundingSet=~CAP_KILL                             Service may send UNIX signals to arbitrary processes                         0.1\n✗ CapabilityBoundingSet=~CAP_MKNOD                            Service may create device nodes                                              0.1\n✗ CapabilityBoundingSet=~CAP_NET_(BIND_SERVICE|BROADCAST|RAW) Service has elevated networking privileges                                   0.1\n✗ CapabilityBoundingSet=~CAP_SYSLOG                           Service has access to kernel logging                                         0.1\n✗ CapabilityBoundingSet=~CAP_SYS_(NICE|RESOURCE)              Service has privileges to change resource use parameters                     0.1\n✗ RestrictNamespaces=~CLONE_NEWCGROUP                         Service may create cgroup namespaces                                         0.1\n✗ RestrictNamespaces=~CLONE_NEWIPC                            Service may create IPC namespaces                                            0.1\n✗ RestrictNamespaces=~CLONE_NEWNET                            Service may create network namespaces                                        0.1\n✗ RestrictNamespaces=~CLONE_NEWNS                             Service may create file system namespaces                                    0.1\n✗ RestrictNamespaces=~CLONE_NEWPID                            Service may create process namespaces                                        0.1\n✗ RestrictRealtime=                                           Service may acquire realtime scheduling                                      0.1\n✗ SystemCallFilter=~@cpu-emulation                            Service does not filter system calls                                         0.1\n✗ SystemCallFilter=~@obsolete                                 Service does not filter system calls                                         0.1\n✗ RestrictAddressFamilies=~AF_NETLINK                         Service may allocate netlink sockets                                         0.1\n✗ RootDirectory=/RootImage=                                   Service runs within the host's root directory                                0.1\n  SupplementaryGroups=                                        Service runs as root, option does not matter\n✗ CapabilityBoundingSet=~CAP_MAC_*                            Service may adjust SMACK MAC                                                 0.1\n✗ CapabilityBoundingSet=~CAP_SYS_BOOT                         Service may issue reboot()                                                   0.1\n✓ Delegate=                                                   Service does not maintain its own delegated control group subtree\n✗ LockPersonality=                                            Service may change ABI personality                                           0.1\n✗ MemoryDenyWriteExecute=                                     Service may create writable executable memory mappings                       0.1\n  RemoveIPC=                                                  Service runs as root, option does not apply\n✗ RestrictNamespaces=~CLONE_NEWUTS                            Service may create hostname namespaces                                       0.1\n✗ UMask=                                                      Files created by service are world-readable by default                       0.1\n✗ CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE                  Service may mark files immutable                                             0.1\n✗ CapabilityBoundingSet=~CAP_IPC_LOCK                         Service may lock memory into RAM                                             0.1\n✗ CapabilityBoundingSet=~CAP_SYS_CHROOT                       Service may issue chroot()                                                   0.1\n✗ CapabilityBoundingSet=~CAP_BLOCK_SUSPEND                    Service may establish wake locks                                             0.1\n✗ CapabilityBoundingSet=~CAP_LEASE                            Service may create file leases                                               0.1\n✗ CapabilityBoundingSet=~CAP_SYS_PACCT                        Service may use acct()                                                       0.1\n✗ CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG                   Service may issue vhangup()                                                  0.1\n✗ CapabilityBoundingSet=~CAP_WAKE_ALARM                       Service may program timers that wake up the system                           0.1\n✗ RestrictAddressFamilies=~AF_UNIX                            Service may allocate local sockets                                           0.1\n\n→ Overall exposure level for opensnitch.service: 9.5 UNSAFE 😨\n```\nThis list provides some indication of settings that can be improved to lower the risk the service poses to the rest of the system. Of course we still need to evaluate every rule qualitatively to understand the impact it will have on our application. `opensnitch` in particular proved itself to be finicky, since it (1) is an application firewall, and (2) it does not always fail hard (requests just hang for some systemd settings).\n\nThe official documentation does a better job at explaining the individual options, but I would still like to highlight some options that I consider particular important:\n* `DynamicUser` or `User` allows you to pick a user other than root to run the systemd unit. In my personal opinion, this option is the most important to reduce access to the host system (when used in conjunction with `NoNewPrivileges`).\n* `PrivateNetwork`, `IPAddressDeny` and `IPAddressAllow` allow you to reduce the network access for a systemd unit. In many cases, this is the best way to prevent a compromised systemd unit to upload data to an external system.\n* `CapabilityBoundingSet` combined with `AmbientCapabilities` will allow you to give the systemd unit some limited superuser capabilities. This came in handy for `opensnitch`, since it leverages quite a bit of kernel functionality.\n\nUnfortunately the last point was a significant point of frustration for `opensnitch`, since it was hard to determine what capabilities are needed. The tools I found online did not seem to solve my problems. [getpcaps](https://man7.org/linux/man-pages/man8/getpcaps.8.html) printed the capaibilites that a process had, not the ones that it was using. I was unable to run [capable](https://www.brendangregg.com/blog/2016-10-01/linux-bcc-security-capabilities.html) successfully. And `strace` did not log the used capabilities. In the end I ended up individually removing capabilities to determine which ones were required.\n\n# Protonmail\n\nFor `protonmail` I went back to `systemd-analyze security --user` to find what settings can be improved. Unfortunately almost every single setting caused the systemd service to fail to start with an error message:\n```\nFailed to drop capabilities: Operation not permitted\nFailed at step CAPABILITIES spawning /you-binary-path: Operation not permitted\n```\nEven limiting the set of possible capabilites, such as with `CapabilityBoundingSet` did not work. After a lot of head scratching, [this github issue](https://github.com/systemd/systemd/issues/4959) explained that the user does not have the ability to reduce its own permissions. Frustratingly, setting options such as `ProtectProc` is not possible to apply, since it **implicitly** affects the capabilities.\n\n# Conclusion\n\nWhile I outline weaknesses of `systemd` and `opensnitch`, I am eternally grateful to the maintainers for building those tools. I hope that there will be more of an investment into this in the future. Unfortunately, even on a new debian install the systemd services are mostly considerd unsafe:\n```\n$ systemd-analyze security\nUNIT                                 EXPOSURE PREDICATE HAPPY\ncron.service                              9.5 UNSAFE    😨\ndbus.service                              9.5 UNSAFE    😨\nemergency.service                         9.5 UNSAFE    😨\ngetty@tty1.service                        9.5 UNSAFE    😨\nifup@eth0.service                         9.5 UNSAFE    😨\nopensnitch.service                        9.5 UNSAFE    😨\nrc-local.service                          9.5 UNSAFE    😨\nrescue.service                            9.5 UNSAFE    😨\nrsync.service                             9.5 UNSAFE    😨\nrsyslog.service                           9.5 UNSAFE    😨\nssh.service                               9.5 UNSAFE    😨\nsystemd-ask-password-console.service      9.3 UNSAFE    😨\nsystemd-ask-password-wall.service         9.3 UNSAFE    😨\nsystemd-fsckd.service                     9.5 UNSAFE    😨\nsystemd-initctl.service                   9.3 UNSAFE    😨\nsystemd-journald.service                  4.3 OK        🙂\nsystemd-logind.service                    4.1 OK        🙂\nsystemd-networkd.service                  2.8 OK        🙂\nsystemd-timesyncd.service                 2.0 OK        🙂\nsystemd-udevd.service                     8.3 EXPOSED   🙁\nuser@1000.service                         9.1 UNSAFE    😨\n```\nWith that in mind, I don't see this situation changing anytime soon. Instead the best hope may be that security conscious developers contribute their systemd unit files to upstream repositories. I'll update this post with a PR to improve the `opensnitch` service unit soon.","date":"2021-12-26","ogImage":null,"coverImage":null,"author":{"__typename":"Author","name":"Nigel Schuster","slug":"nigel-schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"}}},"moreStories":[{"__typename":"Post","title":"Variants are incredibly powerful","slug":"variants-are-powerful","excerpt":"Variants are an incredibly powerful tool to express the state of your program!","coverImage":null,"author":{"__typename":"Author","name":"Nigel Schuster","slug":"nigel-schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"}}},{"__typename":"Post","title":"Avoiding generic types for safer code","slug":"avoid-generic-types","excerpt":"Using generic types like strings made me make mistakes on several occasion. There is a better way.","coverImage":null,"author":{"__typename":"Author","name":"Nigel Schuster","slug":"nigel-schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"}}}],"__typename":"Query"},"__N_SSG":true}