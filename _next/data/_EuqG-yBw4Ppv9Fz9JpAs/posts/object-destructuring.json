{"pageProps":{"__typename":"Query","moreStories":[{"__typename":"Post","author":{"__typename":"Author","name":"Nigel Schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"},"slug":"nigel-schuster"},"coverImage":null,"excerpt":"Using generic types like strings made me make mistakes on several occasion. There is a better way.","slug":"avoid-generic-types","title":"Avoiding generic types for safer code"},{"__typename":"Post","author":{"__typename":"Author","name":"Nigel Schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"},"slug":"nigel-schuster"},"coverImage":null,"excerpt":"A good CSP can be a line of defence against XSS. It isn't trivial to get it right though.","slug":"how-to-csp","title":"How to CSP"}],"post":{"__typename":"Post","author":{"__typename":"Author","name":"Nigel Schuster","picture":{"__typename":"Asset","url":"https://media.graphcms.com/resize=fit:crop,height:100,width:100/1bF1qLxsSbElgNK5x6t6"},"slug":"nigel-schuster"},"content":"Object destructuring is a syntax that allows you to unpack values from an object. Many modern languages have support for it. So let's have a look at an example:\n```rust\nstruct User {\n    name: String,\n    age: u8\n}\n\n// Bad: This how I would naively write this\nimpl ToString for User {\n    fn to_string(&self) -> String {\n        format!(\"{name} ({age})\", name=self.name, age=self.age)\n    }\n}\n\n// Good: Take advantage of destructuring\nimpl ToString for User {\n    fn to_string(&self) -> String {\n        let User { name, age } = self;\n        format!(\"{name} ({age})\", name=name, age=age)\n    }\n}\n```\nWhy does it matter? Well, let's have a look what happens when we add a field:\n```rust\nstruct User {\n    name: String,\n    age: u8,\n    height: u16 // in cm\n}\n```\nThe bad example will compile perfectly fine. Meanwhile when using destructuring we get:\n```\nerror[E0027]: pattern does not mention field `height`\n --> src/lib.rs:9:13\n  |\n9 |         let User { name, age } = self;\n  |             ^^^^^^^^^^^^^^^^^^ missing field `height`\n  |\nhelp: include the missing field in the pattern\n  |\n9 |         let User { name, age, height } = self;\n  |                             ^^^^^^^^^^\nhelp: if you don't care about this missing field, you can explicitly ignore it\n  |\n9 |         let User { name, age, .. } = self;\n  |                             ^^^^^^\n```\nThanks to object destructuring we remember to update our code:\n```rust\nimpl ToString for User {\n    fn to_string(&self) -> String {\n        let User { name, age, height } = self;\n        format!(\"{name} ({age}, {height} cm)\", name=name, age=age, height=height)\n    }\n}\n```","coverImage":null,"date":"2021-08-28","ogImage":null,"slug":"object-destructuring","title":"Why object destructuring is awesome"}},"__N_SSG":true}