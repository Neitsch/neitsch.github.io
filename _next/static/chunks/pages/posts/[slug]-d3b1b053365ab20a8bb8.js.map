{"version":3,"file":"static/chunks/pages/posts/[slug]-d3b1b053365ab20a8bb8.js","mappings":"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","sources":["webpack://_N_E/./components/container.tsx","webpack://_N_E/./components/header.tsx","webpack://_N_E/./components/footer.tsx","webpack://_N_E/./components/meta.tsx","webpack://_N_E/./components/layout.tsx","webpack://_N_E/./components/more-stories.tsx","webpack://_N_E/./components/post-preview.tsx","webpack://_N_E/./components/section-separator.tsx","webpack://_N_E/./pages/posts/[slug].tsx","webpack://_N_E/?8fd3"],"sourcesContent":["import { Container as MuiContainer } from \"@material-ui/core\";\nimport type { ReactNode } from \"react\";\n\nexport default function Container({\n  children,\n}: {\n  readonly children: ReactNode;\n}): JSX.Element {\n  return <MuiContainer>{children}</MuiContainer>;\n}\n","import { Link as MuiLink } from \"@material-ui/core\";\nimport Link from \"next/link\";\n\nexport default function Header(): JSX.Element {\n  return (\n    <Link href=\"/\" passHref>\n      <MuiLink variant=\"h1\">Nigel&apos;s Blog.</MuiLink>\n    </Link>\n  );\n}\n","import Container from \"./container\";\n\nexport default function Footer(): JSX.Element {\n  const footerText = (\n    <h3 className=\"text-4xl lg:text-5xl font-bold tracking-tighter leading-tight text-center lg:text-left mb-10 lg:mb-0 lg:pr-4 lg:w-1/2\">\n      Nigel Schuster&apos;s blog.\n    </h3>\n  );\n  return (\n    <footer className=\"bg-accent-1 border-t border-accent-2\">\n      <Container>\n        <div className=\"py-28 flex flex-col lg:flex-row items-center\">\n          {footerText}\n        </div>\n      </Container>\n    </footer>\n  );\n}\n","import Head from \"next/head\";\nimport { useRouter } from \"next/router\";\nimport { useEffect } from \"react\";\n\nexport default function Meta(): JSX.Element {\n  const router = useRouter();\n\n  useEffect(() => {\n    const handleRouteChange = (url: string): void => {\n      (\n        window as unknown as {\n          goatcounter: { count: ({ path }: { readonly path: string }) => void };\n        }\n      ).goatcounter.count({\n        path: url,\n      });\n    };\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n\n    return (): void => {\n      router.events.off(\"routeChangeStart\", handleRouteChange);\n    };\n  }, [router.events]);\n  return (\n    <Head>\n      <link\n        href=\"/favicon/apple-touch-icon.png\"\n        rel=\"apple-touch-icon\"\n        sizes=\"180x180\"\n      />\n      <link\n        href=\"/favicon/favicon-32x32.png\"\n        rel=\"icon\"\n        sizes=\"32x32\"\n        type=\"image/png\"\n      />\n      <link\n        href=\"/favicon/favicon-16x16.png\"\n        rel=\"icon\"\n        sizes=\"16x16\"\n        type=\"image/png\"\n      />\n      <link href=\"/favicon/site.webmanifest\" rel=\"manifest\" />\n      <link\n        color=\"#000000\"\n        href=\"/favicon/safari-pinned-tab.svg\"\n        rel=\"mask-icon\"\n      />\n      <link href=\"/favicon/favicon.ico\" rel=\"shortcut icon\" />\n      <meta content=\"#000000\" name=\"msapplication-TileColor\" />\n      <meta content=\"/favicon/browserconfig.xml\" name=\"msapplication-config\" />\n      <meta content=\"#000\" name=\"theme-color\" />\n      <link href=\"/feed.xml\" rel=\"alternate\" type=\"application/rss+xml\" />\n      <meta content=\"Personal blog.\" name=\"description\" />\n      <script\n        async\n        data-goatcounter=\"https://nigel.goatcounter.com/count\"\n        data-goatcounter-settings=\"{}\"\n        src=\"//gc.zgo.at/count.js\"\n      />\n    </Head>\n  );\n}\n","import Footer from \"../components/footer\";\nimport Meta from \"../components/meta\";\n\nexport default function Layout({\n  children,\n}: {\n  readonly children: Readonly<JSX.Element | JSX.Element[]>;\n}): JSX.Element {\n  return (\n    <>\n      <Meta />\n      <div className=\"min-h-screen\">\n        <main>{children}</main>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import PostPreview from \"../components/post-preview\";\nimport type { MoreStoriesFragment } from \"../generated/graphql\";\nimport { POST_PREVIEW_FRAGMENT } from \"./post-preview\";\nimport { Typography, Grid } from \"@material-ui/core\";\nimport gql from \"graphql-tag\";\n\nexport const MORE_STORIES = gql`\n  ${POST_PREVIEW_FRAGMENT}\n  fragment MoreStories on Query {\n    moreStories: posts(\n      orderBy: date_DESC\n      first: 2\n      where: { slug_not_in: [$slug] }\n    ) {\n      ...PostPreview\n    }\n  }\n`;\n\nexport default function MoreStories({\n  moreStories,\n}: MoreStoriesFragment): JSX.Element {\n  return (\n    <div>\n      <Typography variant=\"h4\">More Stories</Typography>\n      <Grid container spacing={5}>\n        {moreStories.map((post) => (\n          <Grid item key={post.slug} md={6} xs={12}>\n            <PostPreview post={post} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n","import type { PostPreviewFragment } from \"../generated/graphql\";\nimport {\n  Card,\n  Avatar,\n  Link as MuiLink,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Box,\n  Typography,\n  Chip,\n} from \"@material-ui/core\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\n\nexport const POST_PREVIEW_FRAGMENT = gql`\n  fragment PostPreview on Post {\n    title\n    slug\n    excerpt\n    coverImage {\n      url(\n        transformation: {\n          image: { resize: { fit: crop, width: 2000, height: 1000 } }\n        }\n      )\n    }\n    author {\n      name\n      picture {\n        url(\n          transformation: {\n            image: { resize: { width: 100, height: 100, fit: crop } }\n          }\n        )\n      }\n    }\n  }\n`;\n\nexport default function PostPreview({\n  post: {\n    title,\n\n    coverImage,\n    excerpt,\n    author,\n    slug,\n  },\n}: {\n  post: PostPreviewFragment;\n}): JSX.Element {\n  const titleElem = (\n    <Box flexGrow={1}>\n      <Typography variant=\"h4\">{title}</Typography>\n    </Box>\n  );\n  const previewHeader = (\n    <Box display=\"flex\">\n      {titleElem}\n      {author ? (\n        <Box alignSelf=\"flex-end\">\n          <Chip\n            avatar={<Avatar alt={author.name} src={author.picture?.url} />}\n            label={author.name}\n          />\n        </Box>\n      ) : null}\n    </Box>\n  );\n  const excerptElem = <Typography variant=\"body1\">{excerpt}</Typography>;\n  const innerCardContent = (\n    <>\n      {previewHeader}\n      {excerptElem}\n    </>\n  );\n  const cardContent = (\n    <Link href={`/posts/${slug}`} passHref>\n      <MuiLink>{innerCardContent}</MuiLink>\n    </Link>\n  );\n  return (\n    <Card>\n      <CardMedia component=\"img\" src={coverImage?.url} />\n\n      <CardContent>\n        <CardActionArea>{cardContent}</CardActionArea>\n      </CardContent>\n    </Card>\n  );\n}\n","export default function SectionSeparator(): JSX.Element {\n  return <hr className=\"border-accent-2 mt-28 mb-24\" />;\n}\n","import Container from \"../../components/container\";\nimport Header from \"../../components/header\";\nimport Layout from \"../../components/layout\";\nimport MoreStories, { MORE_STORIES } from \"../../components/more-stories\";\nimport SectionSeparator from \"../../components/section-separator\";\nimport type { PostLookupFragment } from \"../../generated/graphql\";\nimport { getAllPostsWithSlug, getPostAndMorePosts } from \"../../lib/graphcms\";\nimport {\n  Card,\n  Box,\n  Chip,\n  Avatar,\n  Typography,\n  CardContent,\n  CardMedia,\n} from \"@material-ui/core\";\nimport gql from \"graphql-tag\";\nimport langx86 from \"highlight.js/lib/languages/x86asm\";\nimport \"highlight.js/styles/default.css\";\nimport type { GetStaticProps, GetStaticPaths } from \"next\";\nimport Head from \"next/head\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n  EmailShareButton,\n  LinkedinShareButton,\n  RedditShareButton,\n  EmailIcon,\n  LinkedinIcon,\n  RedditIcon,\n} from \"react-share\";\nimport rehypeHighlight from \"rehype-highlight\";\n\nexport const POST_FRAGMENT = gql`\n  fragment Post on Post {\n    title\n    excerpt\n    slug\n    content\n    date\n    ogImage: coverImage {\n      url(\n        transformation: {\n          image: { resize: { fit: crop, width: 2000, height: 1000 } }\n        }\n      )\n    }\n    coverImage {\n      url(\n        transformation: {\n          image: { resize: { fit: crop, width: 2000, height: 1000 } }\n        }\n      )\n    }\n    author {\n      name\n      picture {\n        url(\n          transformation: {\n            image: { resize: { fit: crop, width: 100, height: 100 } }\n          }\n        )\n      }\n    }\n  }\n`;\nexport const POST_LOOKUP = gql`\n  ${MORE_STORIES}\n  fragment PostLookup on Query {\n    post(stage: $stage, where: { slug: $slug }) {\n      ...Post\n    }\n    ...MoreStories\n  }\n`;\n\nexport default function Post({\n  post,\n  moreStories,\n}: PostLookupFragment): JSX.Element {\n  let content = <span>Something went wrong</span>;\n  if (post) {\n    const head = (\n      <Head>\n        <title>{post.title}</title>\n        <meta content={post.excerpt ?? \"\"} name=\"description\" />\n        <meta content={post.title} property=\"og:title\" />\n        <meta content={post.excerpt ?? \"\"} property=\"og:description\" />\n        <meta content=\"article\" property=\"og:type\" />\n        <meta content=\"en_US\" property=\"og:locale\" />\n      </Head>\n    );\n    const titleElem = (\n      <Box flexGrow={1}>\n        <Typography component=\"h1\" variant=\"h3\">\n          {post.title}\n        </Typography>\n      </Box>\n    );\n    const authorElem = (\n      <Box alignSelf=\"flex-end\">\n        <Chip\n          avatar={\n            <Avatar alt={post.author?.name} src={post.author?.picture?.url} />\n          }\n          label={post.author?.name}\n        />\n      </Box>\n    );\n    const body = (\n      <Card>\n        <CardMedia component=\"img\" src={post.coverImage?.url} />\n        <CardContent>\n          <Box display=\"flex\">\n            {titleElem}\n            {authorElem}\n          </Box>\n          <ReactMarkdown\n            rehypePlugins={[\n              [rehypeHighlight, { languages: { x86asm: langx86 } }],\n            ]}\n          >\n            {post.content}\n          </ReactMarkdown>\n          <div suppressHydrationWarning>\n            {process.browser && (\n              <div>\n                <EmailShareButton url={window.location.href}>\n                  <EmailIcon round />\n                </EmailShareButton>\n                <LinkedinShareButton url={window.location.href}>\n                  <LinkedinIcon round />\n                </LinkedinShareButton>\n                <RedditShareButton url={window.location.href}>\n                  <RedditIcon round />\n                </RedditShareButton>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n    content = (\n      <>\n        {head}\n        {body}\n      </>\n    );\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <Header />\n        <>\n          {content}\n          <SectionSeparator />\n          <MoreStories moreStories={moreStories} />\n        </>\n      </Container>\n    </Layout>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async ({\n  params,\n}: {\n  readonly params?: { readonly slug?: string };\n  readonly preview?: boolean;\n}) => {\n  const data = await getPostAndMorePosts(params?.slug ?? \"\");\n  return {\n    props: data,\n  };\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const { posts } = await getAllPostsWithSlug();\n  return {\n    paths: posts.map(({ slug }: { readonly slug: string }) => {\n      return {\n        params: { slug },\n      };\n    }),\n    // fallback: true,\n    fallback: false,\n  };\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/posts/[slug]\",\n      function () {\n        return require(\"private-next-pages/posts/[slug].tsx\");\n      }\n    ]);\n  "],"names":["Container","children","Header","href","passHref","variant","Footer","footerText","className","Meta","router","useRouter","useEffect","handleRouteChange","url","window","goatcounter","count","path","events","on","off","rel","sizes","type","color","content","name","async","src","Layout","MORE_STORIES","gql","POST_PREVIEW_FRAGMENT","MoreStories","moreStories","container","spacing","map","post","item","md","xs","slug","PostPreview","title","coverImage","excerpt","author","titleElem","flexGrow","previewHeader","display","alignSelf","avatar","alt","picture","label","excerptElem","innerCardContent","cardContent","component","SectionSeparator","POST_FRAGMENT","POST_LOOKUP","Post","head","property","Box","Typography","authorElem","Chip","Avatar","body","Card","CardMedia","CardContent","rehypePlugins","rehypeHighlight","languages","x86asm","langx86","suppressHydrationWarning","EmailShareButton","location","EmailIcon","round","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","__NEXT_P","push"],"sourceRoot":""}