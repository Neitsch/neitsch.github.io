{"version":3,"sources":["webpack:///./src/templates/category.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/PostPreview/PostPreview.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["CategoryTemplate","render","category","this","props","pageContext","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","location","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","config","siteTitle","rel","href","siteUrl","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_3__","queryData","data","allMarkdownRemark","React","Component","pageQuery","PostTags","postNode","frontmatter","tags","map","tag","gatsby_link__WEBPACK_IMPORTED_MODULE_3___default","key","style","textDecoration","to","_","kebabCase","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","react__WEBPACK_IMPORTED_MODULE_3___default","react_md_lib_Cards_Card__WEBPACK_IMPORTED_MODULE_4___default","fields","slug","raise","gatsby_link__WEBPACK_IMPORTED_MODULE_10___default","react_md_lib_Media__WEBPACK_IMPORTED_MODULE_11___default","height","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","sizes","cover","childImageSharp","react_md_lib_Media__WEBPACK_IMPORTED_MODULE_11__","react_md_lib_Cards_CardTitle__WEBPACK_IMPORTED_MODULE_5___default","title","react_md_lib_Buttons__WEBPACK_IMPORTED_MODULE_6___default","raised","secondary","expander","avatar","react_md_lib_Avatars__WEBPACK_IMPORTED_MODULE_7___default","icon","react_md_lib_FontIcons__WEBPACK_IMPORTED_MODULE_9___default","iconClassName","date","subtitle","timeToRead","react_md_lib_Cards_CardText__WEBPACK_IMPORTED_MODULE_8___default","expandable","excerpt","_PostTags_PostTags__WEBPACK_IMPORTED_MODULE_12__","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","__webpack_require__","_MediaOverlay3","obj","default","PostListing","edges","post","_PostPreview_PostPreview__WEBPACK_IMPORTED_MODULE_2__","node","id"],"mappings":"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","file":"component---src-templates-category-jsx-63b934b74634068af794.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport Layout from \"../components/layout\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class CategoryTemplate extends React.Component {\n  render() {\n    const category = this.props.pageContext.category;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"category-container\">\n          <Helmet>\n            <title>\n              {`Posts in category \"${category}\" | ${\n              config.siteTitle\n            }`}\n            </title>\n            <link\n              rel=\"canonical\"\n              href={`${config.siteUrl}/categories/${category}`}\n            />\n          </Helmet>\n          <PostListing queryData={this.props.data.allMarkdownRemark} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      ...PostListingFragment\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport Link from \"gatsby-link\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\nimport {graphql} from 'gatsby';\n\nclass PostTags extends Component {\n  render() {\n    const { postNode } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {postNode.frontmatter.tags &&\n          postNode.frontmatter.tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n\nexport const query = graphql`\n  fragment PostTagsFragment on MarkdownRemark {\n    frontmatter {\n      tags\n    }\n  }\n`;\n","import {graphql} from 'gatsby';\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags/PostTags\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.fields.slug} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.fields.slug}>\n          <Media\n            style={{\n              height: `${coverHeight}px`\n            }}\n            className=\"post-preview-cover\"\n          >\n            <Img sizes={postInfo.frontmatter.cover.childImageSharp.sizes} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.frontmatter.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${postInfo.frontmatter.date}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags postNode={postInfo} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n\nexport const query = graphql`\n  fragment PostPreviewFragment on MarkdownRemark {\n    ...PostTagsFragment\n    fields {\n      slug\n    }\n    excerpt\n    timeToRead\n    frontmatter {\n      title\n      tags\n      cover {\n        childImageSharp {\n          sizes(maxWidth: 630) {\n            ...GatsbyImageSharpSizes_withWebp_tracedSVG\n          }\n          fluid {\n            src\n          }\n        }\n      }\n      date\n    }\n  }\n`;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PostPreview from \"../PostPreview/PostPreview\";\n\nclass PostListing extends React.Component {\n  render() {\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {this.props.queryData.edges.map(post => (\n            <PostPreview key={post.node.id} postInfo={post.node} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n\n\nexport const query = graphql`\n  fragment PostListingFragment on MarkdownRemarkConnection {\n    edges {\n      node {\n        id\n        ...PostPreviewFragment\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}