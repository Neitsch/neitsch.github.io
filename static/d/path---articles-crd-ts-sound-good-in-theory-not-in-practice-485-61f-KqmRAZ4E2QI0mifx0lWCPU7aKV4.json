{"data":{"markdownRemark":{"html":"<p>This term I did some research on conflict-free replicated datatypes (CRDTs). I will walk through what they are, why the concept is cool, but they don't work in practice.</p>\n<h1 id=\"what-are-crdts\"><a href=\"#what-are-crdts\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are CRDTs?</h1>\n<p>CRDT is a data structure that propagates concurrently in a network without the need for coordination.\nCRDTs are mathematically proven to not cause inconsistencies.\nThis property is desirable, since all partitions of a split-brain scenario can continue accepting writes.\nSince machines continue functioning independently, not all writes will immediately seen by all machines.\nCRDTs are used in eventually consistent systems.</p>\n<p>Let's look at a concrete example of a CRDT: a simple counter (G-Counter).\nTo represent a counter we actually maintain N counters, where N is the number of machines.\nEach machine independently increments its counter if it receives a write.\nWhen two machines communicate each one sends along the latest values of all counters it knows of.\nA machine then takes the max of the local value and the received value for each counter.\nWhen a user reads the value of a counter, the system returns the sum of all counters.</p>\n<p>Based on similar concepts we can construct other similar data types:</p>\n<ul>\n<li>PN-Counter: A PN-Counter supports increments and decrements.\nThis is achieved by using two G-Counter, one keeps track of increments, the other one keeps track of decrements.</li>\n<li>G-Set: A G-Set is a set to which elements can be added to, but not removed.\nSets are propagates by taking the union of the local set with the received set.</li>\n<li>2P-Set: A 2P-Set allows for adding and removing items once.\nOnce a item was removed, it can not be added again.\nA 2P-Set is achieved by maintaining a tombstone set.\nThe tombstone set indicates which elements to exclude from the return value.</li>\n</ul>\n<p>Another frequently used CRDT is a LWW-Set (Last-Write-Wins).\nThis data structure is able to handle repeated additions and removals by timestamping each change.\nThe timestamp is generated using vector clocks.\nI personally do not like this data structure.\nVector clocks require consensus, consensus does not allow for a split-brain, and split-brain is a situation we fundamentally want to be able to handle with CRDTs.</p>\n<h1 id=\"my-research\"><a href=\"#my-research\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Research</h1>\n<p><a href=\"https://github.com/raymondxu/\">Raymond</a> and I wanted to test the viability of CRDTs in practice.\nFor this, we took an existing application and migrated components of it to a CRDT store.</p>\n<p>For this, we chose the application Vataxia, a simple social network with a Django backend. The <a href=\"https://github.com/buckyroberts/Vataxia-Frontend\">frontend</a> and <a href=\"https://github.com/buckyroberts/Vataxia\">backend</a> are completely decoupled. As our storage layer we chosee <a href=\"docs.basho.com/riak/kv/2.2.3/learn/concepts/crdts/\">Riak</a>, a well established CRDT store.</p>\n<p>We attempted to mirror the functionality provided by Vataxia originally. The two components we migrated are Voting and Messaging.</p>\n<h2 id=\"voting\"><a href=\"#voting\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Voting</h2>\n<p>Voting in Vataxia is simple. We broke it down into a few requirements:</p>\n<ul>\n<li>At most one Upvote or Downvote per user and post</li>\n<li>Vote removal must be possible</li>\n<li>No duplicate votes</li>\n<li>Only upvote OR downvote</li>\n</ul>\n<p>Take a minute and think about how you would implement it.\nWe considered the following options:</p>\n<ul>\n<li>Using per post Counters: Counters sound simple and intuitive.\nCounters do not check whether a user casted a duplicate vote, therefore this solution is not viable.</li>\n<li>Having a Set of voters per post: We considered using a G-Set, thereby eliminating the possibility of duplicate votes. This approach did not account for removing or changing one's vote.\nWe also considered using a 2P-Set, but this did not allow for the sequence upvote - remove vote - upvote.\nThis did not work either.\nA LWW-Set fulfilled almost all requirements.\nYet, it did not work, because it did not allow to enforce only having an upvote OR a downvote, since we have to maintain a seperate upvote and downvote set.</li>\n<li>A map per post with key user and value vote: Each post maintans a LWW-Map. On each post the key of the map is the user ID, while the value is true or false (upvote / downvote, absence = no vote). This solution ended up being the only approach that was able to replicate the semantics of Vataxia.</li>\n</ul>\n<h2 id=\"messaging\"><a href=\"#messaging\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Messaging</h2>\n<p>In Vataxia messaging is akin to emails.\nIt does not allow for chats or threads.\nInstead one sends individual messages that Vataxia treats completely separately.\nThe problems we faced here were different.\nImplementing even a basic version was a lot harder.</p>\n<p>We chose to use the following system.\nOur system maintains messages in a LLW-Map, where the key is the timestamp and the sender, while the value is the actual message.\nA G-Set maintained on the user referrences his sent and received messages.\nNote, that a G-Set is unordered, therefore we must address this on the application level.\nTo retrieve the latest messages we order the set on the user by timestamp and then fetch the latest messages.\nThis process can be expensive, since we load the identifier for every single message ever sent/received into memory and sort it.</p>\n<h1 id=\"problems-of-crdts\"><a href=\"#problems-of-crdts\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problems of CRDTs</h1>\n<p>We notice, that the LWW-Map is a crucial component for both components we converted.\nFor me personally that is a deal breaker for CRDTs.\nSince we rely so heavily on vector clocks, we rely on consensus.\nCRDTs do not circumvent consensus in those cases and do not make the implementation easier.\nOur implementations almost converged to the usage of a simple KeyValue-store, but with a more limited set of operations.</p>\n<p>The other major criticism for CRDTs is privacy.\nIf we do not use vector clocks, data that is written to the store will never be deleted.\nEven a 2P-Set never truly deletes data, it merely marks it as hidden.\nIf an intruder gains access to the set, he/she can access the tombstone set and inspect deleted data.\nThose semantics are at odds with the EU \"right to be forgotten\".</p>\n<h1 id=\"retrospective\"><a href=\"#retrospective\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retrospective</h1>\n<p>CRDTs are an interesting concept.\nIf an application can fit into the computational model of CRDTs excluding LWW semantics then CRDTs are a great options.\nAlmost no application can allow for those semantics.\nThe fact that deletion is often not possible is a crucial flaw.</p>\n<h1 id=\"links\"><a href=\"#links\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links</h1>\n<p><a href=\"https://github.com/raymondxu/crdt-project\">Repository</a></p>\n<p><a href=\"https://docs.google.com/presentation/d/1i-AT59MD-DwwM-h1DFZUTj3qmx4_JYlojepA6IOauZI/edit?usp=sharing\">Midterm presentation</a></p>\n<p><a href=\"https://docs.google.com/presentation/d/1i-AT59MD-DwwM-h1DFZUTj3qmx4_JYlojepA6IOauZI/edit?usp=sharing\">Final presentation</a></p>\n<p><a href=\"/uploads/crdt-paper.pdf\">Final paper</a></p>","timeToRead":5,"excerpt":"This term I did some research on conflict-free replicated datatypes (CRDTs). I will walk through what they are, why the concept is cool, but…","frontmatter":{"title":"CRDTs - Sound good in theory, not in practice","cover":{"childImageSharp":{"sizes":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3e%3cpath d='M196 109l-5 8a1017 1017 0 0 0-2 7c0-2 4-7 4-5 0 3 2 1 3-3 1-5 2-5 4 0s2 7 1 9v6l2-2 2-3 2 5 3 4v-1l1-2c2-1 3-1 3 1 1 1 1 0 1-1 0-3-2-4-4-2-1 2-4-1-5-4-1-2-1-3 1-4 1 0 0-2-2-2l-3-3c-2-5-2-5 3-1 3 1 4 3 3 4l1 1 3 1c1 1 1 1 1-2s0-3-3-4l-3-2-3-2-4-2-2-3c-2-1-2-1-2 2m-4 47l-2 5-2 5-1 1c0 2-2 12-4 14l-1 2v2l-2 5c-1 7-1 7-7 5l-5-2 2-2c2-1 2-2 1-2l-3 2c-1 1-2 0-8-4l-6-3 3 3 6 4 2 3h-2l-4-2h-4c-2 1-4 0-4-3l-2-1c-3 0-3-2-2-4s2-2 5-1c1 0 2 0 1-1s-1-6 2-10c2-3 4-4 4-3 1 1 1 1 1-1v-4l-2-1h-1c-1 2-2 3-1 4 0 2 0 2-1 1l-1-1v1c1 2-2 8-3 7l1-2c2-2 1-3-1-1l-4 2-1 1-11 9-6 6-4 1c-3 0-5 3-3 7 2 3 5 3 6 0 3-3 14-10 13-7v22l-3 3c-2 0-2 1-2 9 0 7 1 10 2 10 1 1 0 5-1 6v2l2 8c0 16 0 16 2 16s3-1 3-2l1-2v2l3 2c1 0 1-1-1-3l-2-3c0-2 10-1 10 0h1l2-1v2c-2 2-3 5-2 5l2-2c1-3 2-3 4-1 0 2 1 3 2 3v-3c-3-4-3-4 5-4 7 0 7 0 3 4l-2 3h3c3 0 3 0 3-2-1-1 0-2 1-3v-18l-1-2h4v-1c-2 0-2-1-2-3 0-3 0-3-1-2s-1 1-1-1 5-4 6-2c1 3 2 1 2-5v-6l-4-1c-3 0-3-1-4-5l2-9 1-6 4-10a506 506 0 0 0 9-35m92 14l-3 3c-3 2-3 7 0 8l1 6c0 3 0 5 1 4v8l1 8 1 9c0 9 0 9-1 4-2-10-3-14-2-6 1 12 0 18-1 19-4 1-7-1-7-3 0-4-2-5-5-4-4 0-4 1-4 3l1 3 1 1 5 1c9 2 9 2 7 6-3 3-4 8-4 15 0 3-1 4-2 4l-1 1 2 1 2 3c0 3 1 3 4 3 2 0 3 0 3-2l1-2 1-1 2-1c5 0 3-2-1-2-3 0-3 0-1-1 2 0 3 0 2-1v-8c-1-1 0-2 1-3v-2l-1-5v-4l6-1 8 1 3-1c3-2 3-3 2-8l-1-7-2-2h-1l-3-3c-1-1-1-2-2-1l-3 1-2 1-2 2c-3 1-4 0-4-8v-18l-1-5-1-5 3 5c3 6 4 6 2 0l-1-5 1-2-2-2h-1l2-2c2-1 1-2-2-4l-2-1m-212 4l-4 3c-2 0-3 0-2 1v2l1 4c2 2 2 5 2 21l1 20-1-10-3-11-1-6-2-5v2l-1 4h-1l2 1v1c-3 1-5-1-3-3v-1l-1-1c0-3-2-3-3 0v3c2 1 2 3 2 5-1 4 0 7 1 5 1-1 1-1 1 1l1 2v1l1 4c0 2 0 2 1 1 1-2 1-2 1 1l1 8c2 5 2 7 1 7v1l1 1h-5l-1-4c0-2-1-2-4-2s-4 0-4-2-2-3-2 0v1l1 3c-1 5 1 7 8 7 5 0 6 1 4 3-3 1-5 7-5 11l-2 5v2c2 0 2 1 2 2l-1 2h-2c-2 0-2 0-1 1 2 2 14 2 17 1l1-2-2-1v-2c-1-1-1-1 1-1v-1c-2-2-2-3-1-3l2-1-2-2-1-1 3-1h3l-3-2c-2-2-3-9 0-9l1-1c0-2 12-1 12 1 1 1 1 1 4-1s4-3 2-4c-1-1-2-2-2-5 1-4 0-6-1-7-3-3-4-6-6-11l-2-3 1 6c2 4 1 7 0 4-2-2-6-1-6 1 1 1 0 2-1 2l-1-2-1-2c-1-1 0-10 1-10v-1c-1-1-2-10 0-10l1-1-1-1-2-4 1-4 4 12 1 2-1-9c-1-2-2-7 0-7s1-1-1-3l-2-3 2-1 2-1-1-1-2-1c-1-2-3-2-3-1m92 22c-1 0-2 1-1 2 0 1 0 2-2 2v1l8 6c2 2 3 2 3 0h1c0 3 2 1 3-4 2-5 1-6-4-6l-5-1h-3m-19 5v10c1 1 1 1 3-1l2-2v2c-2 2-2 2 1 2l4-2h10c3 1 2-1-2-5l-4-4-2 3-3 2 1-2c2-3 2-4-1-2h-1l-3-1h-5m221 24l-3 10-1 6-1 3-1 3-1 3-1-1v-5c1 0 1-1-1-2-1-2-2-2-3 0-2 1-3 1-2-2l-1-1h-1l1-1 1-1c0-1-1-2-2-1-2 0-2 0-1-1v-5c2-4 2-6 0-3l-5 6-2 4c2-1 3 2 1 7-1 2-2 3-4 3s-2 0-2 5 0 5 3 5c2 0 3 1 1 2v4c1 3 2 4 3 3 1-2 13-2 13 0l11 1c10 0 11 0 11-2l-2-2-2-1h-3c0-2-3-4-3-3h-7c-2-2-1-3 2-3 1 1 2 0 3-2 2-4 1-5-4-5-2 0-2 0 0-5l5-24-2 5M28 239l-8 6c-2 0-2 2-1 3h3l1-1 2-1c2-1 2-1 2 1l-2 4c0 2-1 3-3 3-3 0-3 0-3 5s0 5 3 5l3 2 8 1c6 0 7 0 6-1-4-1-3-2 1-1l5-1 3-1c4 1 4-7 0-7l-3-1-1-1h-1l-1 1-1-3-1-3-1-1c0-3-2-2-2 0-1 1-1 1-2-1v-2c3 1 2-1 0-3-1-2-2-3-1-5 2-7 1-7-6 2' fill='lightgray' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.272727272727273,"src":"/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-4a2eb.jpg","srcSet":"/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-8495f.jpg 200w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-ffa71.jpg 400w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-4a2eb.jpg 800w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-66e1b.jpg 1200w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-fe773.jpg 1600w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-40ca2.jpg 2400w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-01858.jpg 2537w","srcWebp":"/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-dd2a8.webp","srcSetWebp":"/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-c4602.webp 200w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-54b15.webp 400w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-dd2a8.webp 800w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-86411.webp 1200w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-23d56.webp 1600w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-c36a5.webp 2400w,\n/static/cranes-f91b8c0a40aabe0a1601b808c56710b8-3c2c9.webp 2537w","sizes":"(max-width: 800px) 100vw, 800px"}}},"date":"05/05/2018","category":"Distributed Systems","tags":["Distributed Systems","CRDT","Conflict-Free Replicated Datatype"]},"fields":{"nextTitle":"Welcome to my Blog","nextSlug":"/articles/welcome-to-my-blog","prevTitle":"Lamport Clocks","prevSlug":"/articles/lamport-clocks","slug":"/articles/crd-ts-sound-good-in-theory-not-in-practice"}}},"pageContext":{"jsonName":"articles-crd-ts-sound-good-in-theory-not-in-practice-485","internalComponentName":"ComponentArticlesCrdTsSoundGoodInTheoryNotInPractice","path":"/articles/crd-ts-sound-good-in-theory-not-in-practice","component":"/Users/nigel/Documents/Projects/personal-website/src/templates/post.jsx","componentChunkName":"component---src-templates-post-jsx","context":{"slug":"/articles/crd-ts-sound-good-in-theory-not-in-practice"},"updatedAt":1530123728589,"pluginCreator___NODE":"Plugin default-site-plugin","pluginCreatorId":"Plugin default-site-plugin","componentPath":"/Users/nigel/Documents/Projects/personal-website/src/templates/post.jsx","slug":"/articles/crd-ts-sound-good-in-theory-not-in-practice"}}