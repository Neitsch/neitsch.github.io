{"version":3,"sources":["webpack:///./src/components/SEO/BlogSEO.jsx","webpack:///./src/pages/index.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/PostPreview/PostPreview.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/SEO/SEO.jsx","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["BlogSEO","render","react_default","a","createElement","Fragment","SEO","Object","assign","addiitionalJsonLD","@context","@type","about","config","siteDescription","url","siteUrl","pathPrefix","blogPost","this","props","queryData","allMarkdownRemark","edges","map","post","node","fields","slug","name","frontmatter","title","headline","image","cover","childImageSharp","fluid","src","description","excerpt","Component","Index","layout","location","className","Helmet_default","siteTitle","rel","href","PostListing","data","SEO_BlogSEO","React","pageQuery","PostTags","postNode","react__WEBPACK_IMPORTED_MODULE_1___default","tags","tag","gatsby_link__WEBPACK_IMPORTED_MODULE_3___default","key","style","textDecoration","to","_","kebabCase","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","react__WEBPACK_IMPORTED_MODULE_3___default","react_md_lib_Cards_Card__WEBPACK_IMPORTED_MODULE_4___default","raise","gatsby_link__WEBPACK_IMPORTED_MODULE_10___default","react_md_lib_Media__WEBPACK_IMPORTED_MODULE_11___default","height","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","sizes","react_md_lib_Media__WEBPACK_IMPORTED_MODULE_11__","react_md_lib_Cards_CardTitle__WEBPACK_IMPORTED_MODULE_5___default","react_md_lib_Buttons__WEBPACK_IMPORTED_MODULE_6___default","raised","secondary","expander","avatar","react_md_lib_Avatars__WEBPACK_IMPORTED_MODULE_7___default","icon","react_md_lib_FontIcons__WEBPACK_IMPORTED_MODULE_9___default","iconClassName","date","subtitle","timeToRead","react_md_lib_Cards_CardText__WEBPACK_IMPORTED_MODULE_8___default","expandable","_PostTags_PostTags__WEBPACK_IMPORTED_MODULE_12__","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","__webpack_require__","_MediaOverlay3","obj","default","postURL","keywords","_this$props","postPath","postSEO","postMeta","join","siteLogo","realPrefix","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","property","userName","type","JSON","stringify","concat","siteFBAppID","userTwitter","_PostPreview_PostPreview__WEBPACK_IMPORTED_MODULE_2__","id"],"mappings":"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","file":"component---src-pages-index-jsx-62acd4f65efd97bc0692.js","sourcesContent":["import React, { Component } from \"react\";\nimport {graphql} from 'gatsby';\nimport SEO from './SEO';\nimport config from \"../../../data/SiteConfig\";\n\nclass BlogSEO extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <SEO\n          addiitionalJsonLD={[{\n            \"@context\" : \"http://schema.org\",\n            \"@type\" : \"Blog\",\n            \"about\" : config.siteDescription,\n            \"url\": config.siteUrl + config.pathPrefix,\n            \"blogPost\": this.props.queryData.allMarkdownRemark.edges.map(post => ({\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"BlogPosting\",\n              url: config.siteUrl + (config.pathPrefix === \"/\" ? \"\" : config.pathPrefix) + post.node.fields.slug,\n              name: post.node.frontmatter.title,\n              headline: post.node.frontmatter.title,\n              image: {\n                \"@type\": \"ImageObject\",\n                url: config.siteUrl + (config.pathPrefix === \"/\" ? \"\" : config.pathPrefix) + post.node.frontmatter.cover.childImageSharp.fluid.src\n              },\n              description: post.node.excerpt,\n            }))\n          }]}\n          {...this.props}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BlogSEO;\n\nexport const query = graphql`\n  fragment BlogSEOFragment on Query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          frontmatter {\n            title\n            cover {\n              childImageSharp {\n                fluid {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport BlogSEO from \"../components/SEO/BlogSEO\";\nimport Layout from \"../components/layout\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}`} />\n          </Helmet>\n          <PostListing queryData={this.props.data} />\n          <BlogSEO queryData={this.props.data} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    ...PostListingFragment\n    ...BlogSEOFragment\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport Link from \"gatsby-link\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\nimport {graphql} from 'gatsby';\n\nclass PostTags extends Component {\n  render() {\n    const { postNode } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {postNode.frontmatter.tags &&\n          postNode.frontmatter.tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n\nexport const query = graphql`\n  fragment PostTagsFragment on MarkdownRemark {\n    frontmatter {\n      tags\n    }\n  }\n`;\n","import {graphql} from 'gatsby';\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags/PostTags\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.fields.slug} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.fields.slug}>\n          <Media\n            style={{\n              height: `${coverHeight}px`\n            }}\n            className=\"post-preview-cover\"\n          >\n            <Img sizes={postInfo.frontmatter.cover.childImageSharp.sizes} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.frontmatter.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${postInfo.frontmatter.date}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags postNode={postInfo} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n\nexport const query = graphql`\n  fragment PostPreviewFragment on MarkdownRemark {\n    ...PostTagsFragment\n    fields {\n      slug\n    }\n    excerpt\n    timeToRead\n    frontmatter {\n      title\n      tags\n      cover {\n        childImageSharp {\n          sizes(maxWidth: 630) {\n            ...GatsbyImageSharpSizes_withWebp_tracedSVG\n          }\n          fluid {\n            src\n          }\n        }\n      }\n      date\n    }\n  }\n`;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO, addiitionalJsonLD } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    let keywords;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      title = postMeta.title;\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = config.siteUrl + config.pathPrefix + postPath;\n      keywords = postNode.frontmatter.tags.join(\",\");\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    const realPrefix = config.pathPrefix === \"/\" ? \"\" : config.pathPrefix;\n    image = config.siteUrl + realPrefix + image;\n    const blogURL = config.siteUrl + config.pathPrefix;\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    return (\n      <React.Fragment>\n        <Helmet>\n          {/* General tags */}\n          <meta name=\"description\" content={description} />\n          <meta name=\"image\" content={image} />\n          {keywords ? <meta property=\"keywords\" content={keywords} /> : null}\n          <meta name=\"author\" content={config.userName} />\n\n          {/* Schema.org tags */}\n          <script type=\"application/ld+json\">\n            {JSON.stringify([...schemaOrgJSONLD, ...addiitionalJsonLD])}\n          </script>\n\n          {/* OpenGraph tags */}\n          <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n          {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n          <meta property=\"og:title\" content={title} />\n          <meta property=\"og:description\" content={description} />\n          <meta property=\"og:image\" content={image} />\n          <meta\n            property=\"fb:app_id\"\n            content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n          />\n\n          {/* Twitter Card tags */}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          <meta\n            name=\"twitter:creator\"\n            content={config.userTwitter ? config.userTwitter : \"\"}\n          />\n          <meta name=\"twitter:title\" content={title} />\n          <meta name=\"twitter:description\" content={description} />\n          <meta name=\"twitter:image\" content={image} />\n        </Helmet>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SEO;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PostPreview from \"../PostPreview/PostPreview\";\n\nclass PostListing extends React.Component {\n  render() {\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {this.props.queryData.allMarkdownRemark.edges.map(post => (\n            <PostPreview key={post.node.id} postInfo={post.node} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n\n\nexport const query = graphql`\n  fragment PostListingFragment on Query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          ...PostPreviewFragment\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}